//  Helper Functions

rule cannot_move_left? [ 1 (*, #red) ] => [ 1 (*, #red) ] where in(1) = 0;
rule cannot_move_right? [ 1 (*, #red) ] => [ 1 (*, #red) ] where out(1) = 0;

rule move_left [ 2 (*), 1 (*, #red) | 2 -> 1 (empty) ] 
            => [ 2 (*, #red), 1 (*) | 2 -> 1 (empty) ];

rule move_right [ 1 (*, #red), 2 (*) | 1 -> 2 (empty) ] 
             => [ 1 (*), 2 (*, #red) | 1 -> 2 (empty) ];

rule add_left [ 1 (*, #red) | ] 
           => [ 2 (empty), 1 (*, #red) | 2 -> 1 ];

rule add_right [ 1 (*, #red) | ] 
            => [ 1 (*, #red), 2 (empty) | 1 -> 2 ];

rule zero? [ 1 (0, #red) | ] => [ 1 (0, #red) | ];

//  BrainFuck Functions

rule increment <int x>
               [ 1 (x, #red) ]
            => [ 1 (x + 1, #red) ];

rule decrement <int x>
               [ 1 (x, #red) ]
            => [ 1 (x + 1, #red) ];

proc left
    if (cannot_move_left?, add_left); move_left;
end

proc right
    if (cannot_move_right?, add_right); move_right;
end

//  Format of while loop:
//      if(zero?, ..., invalid)!

//  BrainFuck Code:
//      >>[-]<<[->>+<<]
//  Code:   Pseudo code:
//   >>      Move the pointer to cell2
//   [-]     Set cell2 to 0 
//   <<      Move the pointer back to cell0
//   [       While cell0 is not 0
//     -       Subtract 1 from cell0
//     >>      Move the pointer to cell2
//     +       Add 1 to cell2
//     <<      Move the pointer back to cell0
//   ]       End while

right; right; 
if(zero?, decrement, invalid)!
left; left;
if(zero?, decrement; right; right; increment; left; left, invalid)!

// Any BrainFuck programme can be rewritten in Blossom, therefore it is Turing Complete. Hurrah.

// Obviously the above could be one rule, for example (extra rules just to make sure there's enough tape):
rule move_two_to_the_right_1 <int x>
                             [ 1 (x, #red), 2, 3 | 1->2, 2->3 ]
                          => [ 1 (0, #red), 2, 3 (x) | 1->2, 2->3 ];

rule move_two_to_the_right_2 <int x>
                             [ 1 (x, #red), 2 | 1->2 ]
                          => [ 1 (0, #red), 2, 3 (x) | 1->2, 2->3 ]
                             where out(2) = 0;

rule move_two_to_the_right_3 <int x>
                             [ 1 (x, #red) | ]
                          => [ 1 (0, #red), 2, 3 (x) | 1->2, 2->3 ]
                             where out(1) = 0;

with(move_two_to_the_right_1, noop, with(move_two_to_the_right_2, noop, move_two_to_the_right_3));