// Taken from here:
// https://github.com/UoYCS-plasma/GP2/blob/master/Compiler/programs/2colprog
// and translated to blossom.

// Input: a connected host graph G.
// If G is 2-colourable, the program returns a valid 2-colouring of G.
// If G is not 2-colourable, the programs returns G.

// The program chooses a node, colours it red, and nondeterministically 
// colours the whole graph via edges from coloured nodes to uncoloured
// nodes. Once all the nodes are coloured, if there exists an edge connecting
// two nodes of the same colour, then the graph is not 2-colourable.

rule init 
    [ 1 (unmarked) ]
 => [ 1 (#red) ];

rule colour_red 
    [ 1 (#blue), 2 (¬red) ]
 => [ 1 (#blue), 2 (#red) ]
where adj?(1, 2);

rule colour_blue 
    [ 1 (#red), 2 (¬blue) ]
 => [ 1 (#red), 2 (#blue) ]
where adj?(1, 2);


rule joined_reds
    [ 1 (#red), 2 (#red) ]
 => [ 1, 2 ]
where adj?(1, 2);

rule joined_blues
    [ 1 (#blue), 2 (#blue) ]
 => [ 1, 2 ]
where adj?(1, 2);


proc colour
    { colour_red, colour_blue }
end

proc joined_colours?
    { joined_blues, joined_reds }
end

try( init colour! if(joined_colours? : invalid) )