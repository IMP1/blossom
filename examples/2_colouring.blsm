// Taken from here:
// https://github.com/UoYCS-plasma/GP2/blob/master/Compiler/programs/rooted2colprog
// and translated to blossom.

// Input: a connected host graph G.
// If G is 2-colourable, the program returns a valid 2-colouring of G.
// If G is not 2-colourable, the programs returns G.

// The program first chooses a node, makes it a root and colours it red.
// Then the root node is used to control a depth-first colouring of G.
// After a node is coloured a check is made to see if the root node is
// adjacent to any nodes of the same colour. If so, G is not 2-colourable
// and the top-level try condition will fail. Otherwise, the colouring
// continues. If all nodes are coloured and the 2-colouring condition is
// not violated at any point during the colouring, then G is 2-colourable.

// The rules in Invalid colour the root node grey on success, which 
// allows the main loop to break and influences the outcome of the top-level
// try condition.


rule init
    [ 0 ]
 => [ 0 (#red) ];

rule grey_root?
    [ 0 (#grey) | ]
 => [ 0 (#grey) | ];

// The two rules below assign the opposite colour to the uncoloured node
// and dash the edge. The edge dashing acts as a trail of breadcrumbs
// for backtracking purposes.
rule colour_blue
    [ 0 (#red), 1 (empty) | 0 -> 1 ] 
 => [ 0 (#red), 1 (#blue) | 0 -> 1 (#dashed) ];

rule colour_red
    [ 0 (#blue), 1 (empty) | 0 -> 1 ] 
 => [ 0 (#blue), 1 (#red)  | 0 -> 1 (#dashed) ];

rule joined_reds
    [ 0 (#red), 1 (#red)  | 0 -> 1 ]
 => [ 0 (#grey), 1 (#red) | 0 -> 1 ];

rule joined_blues
    [ 0 (#blue), 1 (#blue) | 0 -> 1 ]
 => [ 0 (#grey), 1 (#blue) | 0 -> 1 ];

// Moves the root back along a dashed edge, removing the trail of 
// breadcrumbs along the way.
rule back_red
    [ 0 (#red), 1 (#blue) | 0 -> 1 (#dashed) ]
 => [ 0 (#red), 1 (#blue) | 0 -> 1 (empty) ];

rule back_blue
    [ 0 (#blue), 1 (#red) | 0 -> 1 (#dashed) ]
 => [ 0 (#blue), 1 (#red) | 0 -> 1 (empty) ];

proc joined_colours?
    {joined_reds, joined_blues}
end

proc backtrack
    try( {back_red, back_blue} )
end

proc colour
    {colour_blue, colour_red} if( joined_colours? : backtrack)
end

try(init colour if(grey_root? : invalid))
