// not_fact.blsm
// Made to solve this problem: 
// http://codegolf.stackexchange.com/questions/109248/mathematics-is-fact-programming-is-not

// This takes a connected unary tree where one node has the value of either 1 or 0,
// and the other nodes have the value of "!". The nodes with "!" after the number are treated as factorials.
// The nodes with "!" before the number are treated as the bitwise inverse (and are done after the factorials).
// The nodes with "!" are removed as they are performed, and so the resultant graph is a single node with the final numeric value.

// To run it, use the following commands, having called the file not_fact.blsm and installed blossom.

// blossom not_fact "[ 1(\"!\"), 2(0), 3(\"!\"), 4(\"!\") | 1->2, 2->3, 3->4 ]"
// blossom not_fact "[ 1(1) ]"

rule fact <int x>
          [ 1 (x), 2 ("!") | 1->2 ]
       => [ 1 (1) ];

rule inverse <int x>
         [ 1 ("!"), 2 (x) | 1->2 ]
      => [ 2 ((x + 1) % 2) ];

fact! inverse!

// Below is the 'golfed' form of the above programme. 
// All unnecessary whitespace has been removed, and rule/procedure names have been shorteded.
// It is not very readable, but illustrates what syntax is actually necessary.

// rule a<int x>[1(x),2("!")|1->2]=>[1(1)];rule b<int x>[1("!"),2(x)|1->2]=>[2(1-x)];a!b!
// Number of characters: 86