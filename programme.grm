# Used symbols
#
#   +   addition, concatenation
#   -   subtraction, unary-minus
#   *   multiplication, any-label-value
#   /   division
#   %   modulo
#   ^   exponential
#   !   not, rule-loop
#   ¬   not, mark-absent
#   [   graph-start
#   ]   graph-end
#   |   or, graph-separator
#   &   and
#   :   if/when-separator
#   ;   rule/proc-end
#   "   string-start, string-end
#   #   mark-start
#   {   choice-start
#   }   choice-end
#   (   group-start
#   )   group-end
#   ->  edge-arrow
#   <-> edge-arrow
#   =>  rule-application
#   <   less-than, variable-start
#   <=  less-than-equal
#   >   greater-than, variable-end
#   >=  greater-than-equal
#   ^=  starts-with
#   $=  ends-with
#   ~=  contains
# 
# Unused symbols
#
#   ~
#   $
#   @
#   ?
#   `
#   '
#   ::
#   |=
#   ?=
#   <<
#   >>
#   :=


programme       -> declaration* EOF

declaration     -> rule_def
                |  proc_def
                |  rule_app

rule_def        -> "rule" IDENTIFIER var_list? 
                   graph_def "=>" graph_def 
                   condition? addendum? ";"
var_list        -> "<" (TYPE ":" IDENTIFIER ("," IDENTIFER)* ","?)* ">"
condition       -> "where" expression
addendum        -> "also" statement

graph_def       -> "[" node_def? ("," node_def)* ","? ( 
                   "|" edge_def? ("," edge_def)* ","? )? "]"

node_def        -> NODE_ID label?
edge_def        -> NODE_ID "<"? "->" NODE_ID label?

label           -> "(" value ( "," markset )? ","? ")"
                |  "(" ( markset )? ","? ")"
value           -> literal_value
                |  IDENTIFIER
                |  expression                                                   # only in RHS graphs 

markset         -> mark ( "," mark )*
                |  "unmarked"
mark            -> "#" IDENTIFER
                |  "¬" IDENTIFER

literal_value   -> INTEGER_VALUE
                |  STRING_VALUE
                |  REAL_VALUE
                |  BOOLEAN_VALUE



proc_def        -> "proc" IDENTIFER rule_app* ";"

rule_app        -> "try" "(" rule_seq  ")"                                      # try
                |  "if" "(" rule_seq (":" rule_seq)? (":" rule_seq)? ")"        # if
                |  "with" "(" rule_seq (":" rule_seq)? (":" rule_seq)? ")"      # with
                |  "{" rule_seq ("," rule_seq)* "}"                             # choose
                |  "(" rule_seq ")"                                             # sequence (for grouping)
                |  rule_app "!"                                                 # loop
                |  "noop"                                                       # noop
                |  "invalid"                                                    # invalid
                |  IDENTIFER                                                    # rule/proc

rule_seq        -> rule_app+


expression      -> func_call                                                    # builtin in/out/adj functions
                |  expression "^"   expression
                |  expression "/"   expression
                |  expression "*"   expression
                |  expression "+"   expression
                |  expression "-"   expression
                |  expression "%"   expression
                |  expression "="   expression
                |  expression "!="  expression
                |  expression "<"   expression
                |  expression "<="  expression
                |  expression ">"   expression
                |  expression ">="  expression
                |  expression "&"   expression
                |  expression "and" expression
                |  expression "|"   expression
                |  expression "or"  expression
                |  expression "xor" expression
                |  expression "^="  expression
                |  expression "$="  expression
                |  expression "~="  expression
                |  "¬"   expression
                |  "not" expression
                |  IDENTIFER
                |  literal_value

func_call       -> IDENTIFER "(" func_args? ")"
func_args       -> expression ( "," expression )*

statement       -> func_call                                                    # builtin print/debug procedures

