#!/usr/bin/env ruby

require 'fileutils'

require_relative 'exit_code'

VERSION = "0.4.0"

USAGE = <<~END
Usage:
    
  blossom {--help | --version}
    
  blossom <path/to/programme/file.blsm> 
          {--input <path/to/input/graph/file.bg> | \"<graph text>\"}
          [--output <path/to/output/graph/file.bg>]
          [--trace]
          [--trace-dir <path/to/trace/directory>]
          [--ignore-colours | --merge-colours]
          [--keep-rationals]
          [--dot | --graphML | --blossom]
          [--validate]
END

# Output file
if ARGV.include?("--help") || ARGV.include?("help")
    puts "Blossom Interpreter v#{VERSION}"
    puts
    puts USAGE
    puts
    puts "Arguments:"
    puts
    puts "  help           : Prints this help message."
    puts "  version        : Prints the current version."
    puts "  input          : Specify a file to use for a initial graph."
    puts "  output         : Specify a file to print the resultant graph to."
    puts "  validate       : Parses the programme and graph, doesn't execute, but outputs any errors."
    puts "  trace          : Creates interim graph files throughout the execution of the programme."
    puts "  trace-dir      : Specify a directory for the trace graphs to be created in."
    puts "  ignore-colours : Don't add any colour styling to nodes/edges with colour-valued marks."
    puts "  merge-colours  : Have a node/edge be the average of any colour-valued marks it has."
    puts "  keep-rationals : Keep any rational numeric values as fractions in the resultant graph."
    puts "  dot            : Output the resultant graph in the dot format."
    puts "  graphML        : Output the resultant graph in the GraphML format."
    puts "  blossom        : Output the resultant graph in the blossom format (this is the default)."
    puts
    puts "Examples:"
    puts
    puts "  ./blossom examples/simple_dijkstra.blsm \"[1(0), 2, 3, 4 | 1->2(3), 1->3(5), 2->3(1), 2->4(4), 3->5(2), 4->5(2) ]\""
    puts "  ./blossom examples/2_colouring.blsm --input examples/3x3grid"
    puts
    puts "Report any problems, ask questions, or browse the source at https://github.com/IMP1/blossom"
    exit(ExitCode::OK)
end

if ARGV.include?("-h")
    puts "Blossom Interpreter v#{VERSION}"
    puts
    puts USAGE
    puts
    puts "Report any problems, ask questions, or browse the source at https://github.com/IMP1/blossom"
    exit(ExitCode::OK)
end

if ARGV.include?("--version")
    puts "blossom version #{VERSION}"
    exit(ExitCode::OK)
end

require_relative 'main'
require_relative 'tracer'
require_relative 'graph_formatter'

# Host Graph
if ARGV.count {|a| a == "-i" || a == "--input" } > 1
    puts "Multiple input arguments were included (-i and/or --input). Exiting."
    exit(ExitCode::USAGE)
end

host_graph_filename = "console"
host_graph_file = $stdin

host_graph_index = ARGV.index("-i") || ARGV.index("--input")
if host_graph_index
    ARGV.delete_at(host_graph_index)
    host_graph_filename = ARGV.delete_at(host_graph_index)
    if host_graph_filename.nil?
        puts "A filepath must be supplied as an input file."
        exit(ExitCode::USAGE)
    end
    if !File.exists?(host_graph_filename)
        puts "Could not find graph file '#{host_graph_filename}'. Exiting."
        exit(ExitCode::NOINPUT)
    else
        begin
            host_graph_file = File.open(host_graph_filename, 'r')
        rescue SystemCallError => e
            p e
            puts e.class
            
            # TODO: [0.6.0] handle system errors and return appropriate exit codes.
            # http://blog.honeybadger.io/understanding-rubys-strange-errno-exceptions/

            puts "You don't have sufficient permissions to access the input graph file."
            exit(ExitCode::NOPERM)
        end
        
    end
end


# Output File
if ARGV.count {|a| a == "-o" || a == "--output" } > 1
    puts "Multiple output arguments were included (-o and/or --output). Exiting."
    exit(ExitCode::USAGE)
end

output_file = $stdout.dup

output_index = ARGV.index("-o") || ARGV.index("--output")
if output_index
    ARGV.delete_at(output_index)
    output_filename = ARGV.delete_at(output_index)
    if output_filename.nil?
        puts "A filepath must be supplied as an output file."
        exit(ExitCode::USAGE)
    end
    begin
        output_file = File.open(output_filename, 'w')
    rescue SystemCallError => e
        p e
        puts e.class

        # TODO: [0.6.0] handle system errors and return appropriate exit codes.
        # http://blog.honeybadger.io/understanding-rubys-strange-errno-exceptions/
        
        puts "You don't have sufficient permissions to create the output file."
        exit(ExitCode::CANTCREAT) # or ExitCode::NOPERM ?
    end
end


# Debugging
if ARGV.count {|a| a == "--debug" } > 1
    puts "Multiple debug arguments were included (--debug). Exiting."
    exit(ExitCode::USAGE)
end
$verbose ||= ARGV.delete("--debug")

# Only Validate Source Code
if ARGV.count {|a| a == "--validate" } > 1
    puts "Multiple validate arguments were included (--validate). Exiting."
    exit(ExitCode::USAGE)
end
validate = ARGV.delete("--validate")

# Tracing
if ARGV.count {|a| a == "--trace" } > 1
    puts "Multiple trace arguments were included (--trace). Exiting."
    exit(ExitCode::USAGE)
end
tracing = ARGV.delete("--trace")

if ARGV.count {|a| a == "--trace-dir" } > 1
    puts "Multiple trace arguments were included (--trace-dir). Exiting."
    exit(ExitCode::USAGE)
end
trace_index = ARGV.index("--trace-dir")
if trace_index
    ARGV.delete_at(trace_index)
    trace_directory = ARGV.delete_at(trace_index)
    if trace_directory.nil?
        puts "A path must be supplied as a trace directory."
        exit(ExitCode::USAGE)
    end
end

if tracing
    trace_directory ||= Tracer::DEFAULT_DIRECTORY
    begin
        FileUtils.rm_rf(trace_directory)
        FileUtils.mkdir(trace_directory)
    rescue SystemCallError => e
        p e
        puts e.class

        # TODO: [0.6.0] handle system errors and return appropriate exit codes.
        # http://blog.honeybadger.io/understanding-rubys-strange-errno-exceptions/
        
        puts "You don't have sufficient permissions to create the trace directory."
        exit(ExitCode::CANTCREAT) # or ExitCode::NOPERM ?
    end
end

# Output Format
if ARGV.count {|a| a == "--dot" || a == "--graphML" || a == "--blossom" } > 1
    puts "Multiple output formats were included (--dot, --graphML and/or --blossom). Exiting."
    exit(ExitCode::USAGE)
end

output_format = nil
if ARGV.count {|a| a == "--dot" } == 1
    output_format = :dot
    ARGV.delete("--dot")
elsif ARGV.count {|a| a == "--graphML" } == 1
    output_format = :graph_ml
    ARGV.delete("--graphML")
elsif ARGV.count {|a| a == "--blossom" } == 1
    output_format = :blossom
    ARGV.delete("--blossom")
else
    output_format = :blossom
end

# Output Colours
if ARGV.count {|a| a == "--ignore-colours" || a == "--merge-colours"} > 1
    puts "Multiple output arguments were included (--ignore-colours and/or --merge-colours). Exiting."
    exit(ExitCode::USAGE)
end
colour_strategy = nil
if ARGV.count {|a| a == "--ignore-colours" } == 1
    colour_strategy = :ignore
    ARGV.delete("--ignore-colours")
elsif ARGV.count {|a| a == "--merge-colours" } == 1
    colour_strategy = :merge
    ARGV.delete("--merge-colours")
else
    colour_strategy = :first
end


# Output Rationals
if ARGV.count {|a| a == "--keep-rationals" } > 1
    puts "Multiple output arguments were included (--keep-rationals). Exiting."
    exit(ExitCode::USAGE)
end
keep_rationals = ARGV.delete("--keep-rationals")


# Any Other Arguments
valid = true
ARGV.select {|a| a[0] == "-" }.each do |a|
    puts "Unrecognised option '#{a}'."
    valid = false
end
exit(ExitCode::USAGE) if !valid


# Programme Filename
if ARGV.size > 0
    programme_filename = ARGV.delete_at(0)
else
    programme_filename = gets.chomp
end
if !File.exists?(programme_filename)
    puts "Could not find programme file '#{programme_filename}'. Exiting."
    exit(ExitCode::NOINPUT)
end
begin
    programme_file = File.open(programme_filename, 'r')
    programme_source = programme_file.read
rescue SystemCallError => e
    p e
    puts e.class
    
    # TODO: [0.6.0] handle system errors and return appropriate exit codes.
    # http://blog.honeybadger.io/understanding-rubys-strange-errno-exceptions/

    puts "You don't have sufficient permissions to access the programme file."
    exit(ExitCode::NOPERM)
end

if host_graph_file != $stdin
    host_graph = host_graph_file.read
elsif ARGV.size > 0
    host_graph = ARGV.delete_at(0)
else
    host_graph = gets.chomp
end

run_options = {
    only_validate: !!validate,
    tracing: !!tracing,
    trace_dir: trace_directory,
}
output_graph = Runner.run(programme_source, host_graph, programme_filename, host_graph_filename, run_options)
$stdout.flush

output_options = {
    colour_strategy: colour_strategy,
    keep_rationals: !!keep_rationals,
}

output_file.write(GraphFormatter.format(output_graph, output_format, output_options))
output_file.write("\n")
output_file.flush
output_file.close