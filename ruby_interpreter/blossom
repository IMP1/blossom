#!/usr/bin/env ruby

VERSION = "0.3.0"

# Output file
if ARGV.include?("-h") || ARGV.include?("--help")
    puts "Blossom Interpreter v#{VERSION}"
    puts "Usage: "
    puts
    puts "  blossom <path/to/programme/file.blsm> {--input <path/to/input/graph/file.bg> | \"<graph text>\"} "
    puts "                                        [--output <path/to/output/graph/file.bg>]"
    puts "                                        [--dot | --graphML]"
    puts
    puts "Example:"
    puts
    puts "  blossom examples/simple_dijkstra.blsm \"[1(0), 2, 3, 4, 5 | 1->2(3), 1->3(5), 2->3(1), 2->4(4), 3->5(2), 4->5(2) ]\""
    puts
    puts "Report any problems, ask questions, or browse the source at https://github.com/IMP1/blossom"
    exit(0)
end

require_relative 'main'
require_relative 'graph_formatter'

# Host Graph
if ARGV.count {|a| a == "-i" || a == "--input" } > 1
    puts "Multiple input arguments were included (-i and/or --input). Exiting."
    exit(64)
end

host_graph_filename = "console"
host_graph_file = $stdin

host_graph_index = ARGV.index("-i") || ARGV.index("--input")
if host_graph_index
    ARGV.delete_at(host_graph_index)
    host_graph_filename = ARGV.delete_at(host_graph_index)
    if !File.exists?(host_graph_filename)
        puts "Could not find graph file '#{host_graph_filename}'. Exiting."
        exit(66)
    else
        host_graph_file = File.open(host_graph_filename, 'r')
    end
end


# Output File
if ARGV.count {|a| a == "-o" || a == "--output" } > 1
    puts "Multiple output arguments were included (-o and/or --output). Exiting."
    exit(64)
end

output_file = $stdout.dup

output_index = ARGV.index("-o") || ARGV.index("--output")
if output_index
    ARGV.delete_at(output_index)
    output_filename = ARGV.delete_at(output_index)
    begin
        output_file = File.open(output_filename, 'w')
    rescue Exception => e
        # TODO: handle permission errors and return appropriate exit codes.
        p e
    end
end


# Output Format
if ARGV.count {|a| a == "--dot" || a == "--graphML" } > 1
    puts "Multiple output formats were included (--dot and/or --graphML). Exiting."
    exit(64)
end

output_format = nil
if ARGV.count {|a| a == "--dot" } == 1
    output_format = :dot
    ARGV.delete("--dot")
end
if ARGV.count {|a| a == "--graphML" } == 1
    output_format = :graph_ml
    ARGV.delete("--graphML")
end
output_format ||= :blossom

# Programme Filename
if ARGV.size > 0
    programme_filename = ARGV.delete_at(0)
else
    programme_filename = gets.chomp
end
if !File.exists?(programme_filename)
    puts "Could not find programme file '#{programme_filename}'. Exiting."
    exit(66)
end
programme_file = File.open(programme_filename, 'r')
programme_source = programme_file.read

if ARGV.size > 0
    host_graph = ARGV.delete_at(0)
elsif host_graph_file != $stdin
    host_graph = host_graph_file.read
else
    host_graph = gets.chomp
end

output_graph = Runner.run(programme_source, host_graph, programme_filename, host_graph_filename)

output_file.write(GraphFormatter.format(output_graph, output_format))
output_file.write("\n")
output_file.close