%YAML 1.2
---
file_extensions:
  - blsm
scope: source.blossom
variables:
  type:       '(?:int|string|bool|real|rational|any)'
  hexchar:    '[0-9A-F]'
  identifier: '[A-Za-z_][A-Za-z_0-9]*[\?]?'
  arrow:      '?:(->|<->)'
contexts:

  graph:
    - meta_scope: meta.type.blossom

    - include: _edges
    - include: _nodes

    - match: '\|'
      scope: punctuation.separator.blossom
    - match: '\]'
      scope: punctuation.section.block.end.blossom
      pop: true

  rule:
    - meta_scope: meta.function.blossom

    - match: '<'
      push: rule_variables

    - match: '\['
      scope: punctuation.section.block.begin.blossom
      push: graph

    - match: '=>'
      scope: punctuation.accessor.blossom

    - match: 'where'
      scope: keyword.control.blossom
      push: condition

    - match: 'also'
      scope: keyword.control.blossom
      push: addendum

    - match: ';'
      scope: punctuation.terminator.blossom
      pop: true
    - match: '\bend\b'
      scope: keyword.control.blossom
      pop: true


  procedure:
    - meta_scope: meta.function.blossom

    - include: _instructions

    - match: '\b(?:if|with|try)\b'
      scope: keyword.control.conditional.blossom

    - match: ';'
      scope: punctuation.terminator.blossom
      pop: true
    - match: '\bend\b'
      scope: keyword.control.blossom
      pop: true
      
  label:
    - meta_scope: meta.group.blossom

    # Keywords
    - match: 'empty'
      scope: constant.other.blossom
    - match: 'void'
      scope: constant.other.blossom
    - match: 'unmarked'
      scope: constant.other.blossom
    - match: '\*'
      scope: constant.other.blossom

    # Values
    - match: '\d+'
      scope: constant.numeric.blossom
    - match: '"'
      scope: punctuation.definition.string.begin.raven
      push: string
    - match: '\b{{identifier}}\b'
      scope: variable.other.blossom
      
    # Marks
    - match: '#\w+'
      scope: constant.other.blossom
    - match: 'Â¬\w+'
      scope: constant.other.blossom

    - match: '\)'
      scope: punctuation.section.group.end.blossom
      pop: true


  condition:
    - include: _expressions

    - match: '(?=(?:also))'
      pop: true
    - match: '(?=;)'
      pop: true
    - match: '(?=(?:end))'
      pop: true

  addendum:
    - include: _statements
    - match: '(?=;)'
      scope: punctuation.terminator.blossom
      pop: true
    - match: '(?=(?:end))'
      scope: keyword.control.blossom
      pop: true


  rule_variables:
    - meta_scope: meta.function.parameters

    - match: '{{type}}'
      scope: storage.type.blossom
    - match: '\b{{identifier}}\b'
      scope: variable.parameter.blossom

    - match: '>'
      pop: true


  string:
    - meta_scope: string.quoted.double.raven
    - match: '\\.'
      scope: constant.character.escape.raven
    - match: '(?!<\\)"'
      scope: punctuation.definition.string.end.raven
      pop: true
      
  line_comment:
    - meta_scope: comment.line.blossom
    - match: $
      pop: true
      

  _nodes:
    - match: '\d+'
      scope: entity.name.label.blossom
    - include: _labels

  _edges:
    - match: '(\d+)\s*({{arrow}})\s*(\d+)'
      captures: 
        1: entity.name.label.blossom
        2: entity.name.label.blossom, punctuation.accessor.blossom
        3: entity.name.label.blossom
    - include: _labels

  _labels:
    - match: '\('
      scope: punctuation.section.group.begin.blossom
      push: label

  _expressions:
    - match: '(?:\=|!\=|\&|\||<|<=|>|>=)'
      scope: keyword.operator.logical
    - match: '[\+\-\*\/\%\^]'
      scope: keyword.operator.arithmetic
    - match: '\b(?:in|out|incident|edge\??|adj\??)\b'
      scope: support.function.blossom

  _statements:
    - include: _expressions
    - match: '\b(?:print)\b'
      scope: support.function.blossom

  _instructions:
    - meta_scope: meta.program.blossom

    - match: '\b(?:if|with|try)\b'
      scope: keyword.control.conditional.blossom
    - match: '(?:!|:)'
      scope: keyword.control.conditional.blossom

    - match: '\b(?:invalid|noop)\b'
      scope: support.function.blossom

  _rules:
    - match: '\b(rule)\s*({{identifier}})'
      captures:
        1: keyword.control.blossom
        2: entity.name.function.blossom
      push: rule

  _graphs:
    - match: '(?=\[)'
      push: graph
 
  _procedures:
    - match: '(proc)\s*({{identifier}})'
      captures:
        1: keyword.control.blossom
        2: entity.name.function.blossom
      push: procedure

  _comments: 
    - match: '//'
      scope: punctuation.definition.comment.blossom
      push: line_comment

  main:
    - include: _comments
    - include: _graphs
    - include: _rules
    - include: _procedures
    - include: _instructions
    